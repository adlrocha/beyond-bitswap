name = "beyond-bitswap"

[builders."docker:go"]
enabled = true
go_version = "1.13"
module_path = "github.com/ipfs/test-plans/beyond-bitswap"
exec_pkg = "."

[extra_sources]
  "docker:go" = ["../datasets/testDataset"]

# extra_sources = { "exec:go" = ["./scripts/inputData"] }

# TODO: exec:go does not support traffic shaping, hence you should not use it
#  with this test plan.
[builders."exec:go"]
enabled = true
module_path = "github.com/ipfs/test-plans/beyond-bitswap"
exec_pkg = "."

[runners."local:docker"]
enabled = true

[runners."local:exec"]
enabled = true

["aws"]
region = "eu-west-2"

[runners."cluster:k8s"]
testplan_pod_cpu      = "100m"
testplan_pod_memory   = "100Mi"
provider = "aws"
autoscaler_enabled = false
collect_outputs_pod_cpu     = "102m"
collect_outputs_pod_memory  = "103Mi"

[runners."cluster:swarm"]
enabled = true

[[testcases]]
name = "ipfs-transfer"
instances = { min = 2, max = 64, default = 2 }

  [testcases.params]
  input_data = { type="string", desc="input data to be used in the test (files, random, custom)", default="random"}
  data_dir = { type="string", desc="directory with data is located", default="/plan/scripts/inputData"}
  exchange_interface = { type="string", desc="exchange interface to use in IPFS node", default="bitswap"}
  run_count = { type = "int", desc = "number of iterations of the test", unit = "iteration", default = 1 }
  run_timeout_secs = { type = "int", desc = "timeout for an individual run", unit = "seconds", default = 90 }
  leech_count = { type = "int", desc = "number of leech nodes", unit = "peers", default = 1 }
  passive_count = { type = "int", desc = "number of passive nodes (neither leech nor seed)", unit = "peers", default = 0 }
  timeout_secs = { type = "int", desc = "timeout", unit = "seconds", default = 4000 }#TODO: Decrease to 300 if not debugging. Bear this in mind while making long tests.
  bstore_delay_ms = { type = "int", desc = "blockstore get / put delay", unit = "milliseconds", default = 5 }
  request_stagger = { type = "int", desc = "time between each leech's first request", unit = "ms", default = 0}
  file_size = { type = "int", desc = "file size", unit = "bytes", default = 4194304 }
  latency_ms = { type = "int", desc = "latency", unit = "ms", default = 5 }
  jitter_pct = { type = "int", desc = "jitter as percentage of latency", unit = "%", default = 10 }
  bandwidth_mb = { type = "int", desc = "bandwidth", unit = "Mib", default = 1024 }
  parallel_gen_mb = { type = "int", desc = "maximum allowed size of seed data to generate in parallel", unit = "Mib", default = 100 }
  max_connection_rate = { type = "int", desc = "max connection allowed per peer according to total nodes", unit = "%", default = 100 }
  seeder_rate = { type = "int", desc = "percentage of nodes seeding the file", unit = "%", default = 100 }
  enable_tcp = { type="bool", desc="Enable TCP comparison", default=true }
  enable_dht = { type="bool", desc="Enable DHT in IPFS nodes", default=false }


[[testcases]]
name = "sparse"
instances = { min = 2, max = 64, default = 2 }

  [testcases.params]
  input_data = { type="string", desc="input data to be used in the test (files, random, custom)", default="random"}
  data_dir = { type="string", desc="directory with data is located", default="/plan/scripts/inputData"}
  exchange_interface = { type="string", desc="exchange interface to use in IPFS node", default="bitswap"}
  run_count = { type = "int", desc = "number of iterations of the test", unit = "iteration", default = 1 }
  run_timeout_secs = { type = "int", desc = "timeout for an individual run", unit = "seconds", default = 90 }
  leech_count = { type = "int", desc = "number of leech nodes", unit = "peers", default = 1 }
  passive_count = { type = "int", desc = "number of passive nodes (neither leech nor seed)", unit = "peers", default = 0 }
  timeout_secs = { type = "int", desc = "timeout", unit = "seconds", default = 4000 }#TODO: Decrease to 300 if not debugging. Bear this in mind while making long tests.
  bstore_delay_ms = { type = "int", desc = "blockstore get / put delay", unit = "milliseconds", default = 5 }
  request_stagger = { type = "int", desc = "time between each leech's first request", unit = "ms", default = 0}
  file_size = { type = "int", desc = "file size", unit = "bytes", default = 4194304 }
  latency_ms = { type = "int", desc = "latency", unit = "ms", default = 5 }
  jitter_pct = { type = "int", desc = "jitter as percentage of latency", unit = "%", default = 10 }
  bandwidth_mb = { type = "int", desc = "bandwidth", unit = "Mib", default = 1024 }
  parallel_gen_mb = { type = "int", desc = "maximum allowed size of seed data to generate in parallel", unit = "Mib", default = 100 }
  max_connection_rate = { type = "int", desc = "max connection allowed per peer according to total nodes", unit = "%", default = 100 }
  seeder_rate = { type = "int", desc = "percentage of nodes seeding the file", unit = "%", default = 100 }
  enable_tcp = { type="bool", desc="Enable TCP comparison", default=true }
  enable_dht = { type="bool", desc="Enable DHT in IPFS nodes", default=false }


[[testcases]]
name = "waves"
instances = { min = 2, max = 64, default = 2 }

  [testcases.params]
  input_data = { type="string", desc="input data to be used in the test (files, random, custom)", default="random"}
  data_dir = { type="string", desc="directory with data is located", default="/plan/scripts/inputData"}
  exchange_interface = { type="string", desc="exchange interface to use in IPFS node", default="bitswap"}
  run_count = { type = "int", desc = "number of iterations of the test", unit = "iteration", default = 1 }
  run_timeout_secs = { type = "int", desc = "timeout for an individual run", unit = "seconds", default = 90 }
  leech_count = { type = "int", desc = "number of leech nodes", unit = "peers", default = 1 }
  passive_count = { type = "int", desc = "number of passive nodes (neither leech nor seed)", unit = "peers", default = 0 }
  timeout_secs = { type = "int", desc = "timeout", unit = "seconds", default = 20000 }#TODO: Decrease to 300 if not debugging. Bear this in mind while making long tests.
  bstore_delay_ms = { type = "int", desc = "blockstore get / put delay", unit = "milliseconds", default = 5 }
  request_stagger = { type = "int", desc = "time between each leech's first request", unit = "ms", default = 0}
  file_size = { type = "int", desc = "file size", unit = "bytes", default = 4194304 }
  latency_ms = { type = "int", desc = "latency", unit = "ms", default = 5 }
  jitter_pct = { type = "int", desc = "jitter as percentage of latency", unit = "%", default = 10 }
  bandwidth_mb = { type = "int", desc = "bandwidth", unit = "Mib", default = 1024 }
  parallel_gen_mb = { type = "int", desc = "maximum allowed size of seed data to generate in parallel", unit = "Mib", default = 100 }
  max_connection_rate = { type = "int", desc = "max connection allowed per peer according to total nodes", unit = "%", default = 100 }
  seeder_rate = { type = "int", desc = "percentage of nodes seeding the file", unit = "%", default = 100 }
  number_waves = { type = "int", desc = "Number of waves of leechers", unit = "%", default = 6 }
  enable_tcp = { type="bool", desc="Enable TCP comparison", default=true }
  enable_dht = { type="bool", desc="Enable DHT in IPFS nodes", default=false }



[[testcases]]
name = "bitswap-transfer"
instances = { min = 2, max = 64, default = 2 }

  [testcases.params]
  input_data = { type="string", desc="input data to be used in the test (files, random, custom)", default="random"}
  data_dir = { type="string", desc="directory with data is located", default="/plan/scripts/inputData"}
  exchange_interface = { type="string", desc="exchange interface to use in IPFS node", default="bitswap"}
  run_count = { type = "int", desc = "number of iterations of the test", unit = "iteration", default = 1 }
  run_timeout_secs = { type = "int", desc = "timeout for an individual run", unit = "seconds", default = 90 }
  leech_count = { type = "int", desc = "number of leech nodes", unit = "peers", default = 1 }
  passive_count = { type = "int", desc = "number of passive nodes (neither leech nor seed)", unit = "peers", default = 0 }
  timeout_secs = { type = "int", desc = "timeout", unit = "seconds", default = 300 }
  bstore_delay_ms = { type = "int", desc = "blockstore get / put delay", unit = "milliseconds", default = 5 }
  request_stagger = { type = "int", desc = "time between each leech's first request", unit = "ms", default = 0}
  file_size = { type = "int", desc = "file size", unit = "bytes", default = 4194304 }
  latency_ms = { type = "int", desc = "latency", unit = "ms", default = 5 }
  jitter_pct = { type = "int", desc = "jitter as percentage of latency", unit = "%", default = 10 }
  bandwidth_mb = { type = "int", desc = "bandwidth", unit = "Mib", default = 1024 }
  parallel_gen_mb = { type = "int", desc = "maximum allowed size of seed data to generate in parallel", unit = "Mib", default = 100 }
  max_connection_rate = { type = "int", desc = "max connection allowed per peer according to total nodes", unit = "%", default = 100 }
  libp2p_compressed = {type = "bool", desc = "flag to determine if to use compression at a libp2p level or not", default = false}

[builders."docker:go".dockerfile_extensions]
pre_build           = "RUN apt-get update && apt-get install -y cmake && git clone https://github.com/google/brotli && cd brotli && mkdir out && cd out && ../configure-cmake && make && make test && make install"